/**
 *  <?= controllerName ?> Controller
 *
 *  @package     <?= pack ?>
 *  @version     <?= version ?>
 *  @desc        <?= description ?>
 *  @author      <?= author ?>
 *  @created     <?= created ?>
 *  @link        https://github.com/biggora/trinte/wiki
 *
 *  Created by create-controller script
 *  App based on TrinteJS MVC framework
 *  TrinteJS homepage http://www.trintejs.com
 **/
<?
  namespace = namespace || "";
  var modelVariable = modelName.toLowerCase();
  var basePath = modelName.toLowerCase();
  var basePathPlural = controllerName.toLowerCase();
  var addIncl = namespace && namespace !== "" ? "../" : "" ;
  var addView = namespace && namespace !== "" ? namespace + "/" : "" ;
  var nsPath = namespace && namespace !== "" ? namespace + "_" : "" ;
?>
/*global
  pathTo, <?= modelName ?>
*/
var pager = require('<?= addIncl ?>../lib/pager.js');
var Tools = require('<?= addIncl ?>../lib/tools.js');
var ViewTemplatePath = '<?= addView ?><?= basePathPlural ?>';

module.exports = {

    /**
     * Index action, returns a list either via the <?= addView ?>views/<?= basePathPlural ?>/index.ejs view or via json
     * Default mapping to GET '<?= namespace ?>/<?= basePathPlural ?>'
     * For JSON use '<?= namespace ?>/<?= basePathPlural ?>.json'
     * View Helper method pathTo.<?= nsPath ?><?= basePathPlural ?>()
     * For paging use  pathTo.paging_<?= nsPath ?><?= basePathPlural ?>(from, to)
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'index': function(req, res, next) {
        var t = res.locals.t;
        var title = t('<?= basePathPlural ?>.title.index','<?= controllerName ?>');
        var format = req.params.format || '';
        var sort = req.query.sort || req.body.sort;
        var search = req.query.search || req.body.search;
        var query = req.method === 'POST'? req.body : req.query;
        var from = req.params.from ? parseInt(req.params.from) - 1 : 0;
        var to = req.params.to ? parseInt(req.params.to) : 20;
        var total = 0;
        var opts = {
            skip : from,
            limit : to,
            order : 'id DESC',
            where : {}
        };

        if(sort && sort !== '') {
            var direction = 'ASC';
            if(sort.substr(0, 1) === '-') {
                direction = 'DESC';
                sort = sort.substr(1, sort.length);
            }
            opts.order = sort + ' ' + direction;
        }

        if (search && search !== '') {
            var fieldName = 'name';
            var queryCond = '';
            search = search.toString().replace(/^\s|\s$/, '');
            var queryData = search.split('|');
            if (queryData.length > 1) {
                fieldName = queryData[0];
                queryCond = queryData[1];
            } else {
                queryCond = search;
            }
            opts.where[fieldName] = {
                regex: queryCond
            }
        }

        if( req.session ) {
            req.session.returnTo = req.originalUrl || req.url;
        }

        Tools.validateFields(<?= modelName ?>, query, {}, function(err, filtered) {
            for (var field in filtered) {
                if (filtered[field] !== '') {
                    opts.where[field] = filtered[field];
                }
            }
            opts.where = Tools.queryToDb(<?= modelName ?>, opts.where);
            <?= modelName ?>.count({ where : opts.where }, function(err, count) {
                total = count;
                var pagerHtml = pager.render(from, to, total, pathTo.<?= nsPath ?><?= basePathPlural ?>(), query);
                <?= modelName ?>.all(opts, function (err, <?= basePathPlural ?>) {
                    if (err) {
                        return next(err);
                    }
                    var out = {
                        title: title,
                        first_page: 1,
                        curent_page: (from/to) + 1,
                        total_pages: parseInt((total/to).toFixed()) + 1,
                        items_per_page: to,
                        items_total: total,
                        items_start: from,
                        items_end: from + to,
                        query: query
                    };

                    switch (format.toString()) {
                        case 'json':
                            out.items = <?= basePathPlural ?>.map(function(u) {
                                return u.toObject();
                            });
                            res.json(out);
                            break;
                        case 'xml':
                            out.items = <?= basePathPlural ?>.map(function(u) {
                                return { item : u.toObject() };
                            });
                            res.xml({ root : out });
                            break;
                        default:
                            out.<?= basePathPlural ?> = <?= basePathPlural ?>;
                            out.pagerHtml = pagerHtml;
                            res.render(ViewTemplatePath + '/index', out);
                    }
                });
            });
        });
    },

    /**
     * New action, returns a form via <?= addView ?>views/<?= basePathPlural ?>/edit.ejs view no JSON view.
     * Default mapping to GET '<?= namespace ?>/<?= basePath ?>/new'
     * View Helper method pathTo.new_<?= nsPath ?><?= modelVariable ?>()
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'new': function(req, res) {
        var t = res.locals.t;
        var title = t('<?= basePathPlural ?>.title.new','New <?- modelName ?>');
        var format = req.params.format || '';
        var <?= modelVariable ?> = new <?= modelName ?>(req.query);
        switch (format.toString()) {
            case 'json':
                res.json(<?= modelVariable ?>.toObject());
                break;
            case 'xml':
                res.xml({ root : { item : <?= modelVariable ?>.toObject() } });
                break;
            default:
                res.render(ViewTemplatePath + '/new',{
                    <?= modelVariable ?> : <?= modelVariable ?>,
                    title : title
                });
        }
    },

    /**
     * Create action, creates a single item and redirects to Show or returns the object as json
     * Default mapping to POST '<?= namespace ?>/<?= basePathPlural ?>', no GET mapping
     * View Helper method pathTo.create_<?= nsPath ?><?= modelVariable ?>()
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'create': function(req, res){
        var format = req.params.format || '';
        var action = req.body._action || 'save';
        Tools.validateFields(<?= modelName ?>, req.body.<?= modelVariable ?>, {
            validate: true
        }, function(err, filtered) {
            if (err && err.length) {
                req.flash('error','Could not create <?= modelVariable ?>: ' + err.join(', \n'));
                res.redirect(pathTo.new_<?= nsPath ?><?= modelVariable ?>(req.body.<?= modelVariable ?>));
                return;
            }
            var <?= modelVariable ?> = new <?= modelName ?>(filtered);
            <?= modelVariable ?>.save(function(err) {
                if (err) {
                    req.flash('error','Could not create <?= modelVariable ?>: ' + err);
                    res.redirect(pathTo.new_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>));
                    return;
                }
                switch (format.toString()) {
                    case 'json':
                        res.status(201);
                        res.json(<?= modelVariable ?>.toObject());
                        break;
                    case 'xml':
                        res.xml(201, { root : { <?= modelVariable ?> : <?= modelVariable ?>.toObject() } });
                        break;
                    default:
                        switch(action) {
                           case 'new':
                                 req.flash('info','<?= modelName ?> created and new');
                                 res.redirect(pathTo.new_<?= nsPath ?><?= modelVariable ?>());
                              break;
                           case 'copy':
                                 req.flash('info','<?= modelName ?> created and copy');
                                 delete <?= modelVariable ?>.id;
                                 res.redirect(pathTo.new_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>.toObject()));
                              break;
                           case 'apply':
                                 req.flash('success','<?= modelName ?> saved');
                                 res.redirect(pathTo.edit_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>.toObject()));
                              break;
                           default:
                              req.flash('success','<?= modelName ?> created');
                              res.redirect(pathTo.show_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>.toObject()));
                        }
                }
            });
       });
    },

    /**
     * Show action, returns shows a single item via <?= addView ?>views/<?= basePathPlural ?>/show.ejs view or via json
     * Default mapping to GET '<?= namespace ?>/<?= basePath ?>/:id'
     * For JSON use '<?= namespace ?>/<?= basePath ?>/:id.json'
     * View Helper method pathTo.show_<?= nsPath ?><?= modelVariable ?>(instance)
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'show': function(req, res, next) {
        var t = res.locals.t;
        var title = t('<?= basePathPlural ?>.title.show','Show <?= modelName ?>');
        var format = req.params.format || '';
        <?= modelName ?>.findById(req.params.id, function(err, <?= modelVariable ?>) {
            if(err) {
               return next(err);
            }
            if(<?= modelVariable ?>) {
               switch (format.toString()) {
                    case 'json':
                        res.json(<?= modelVariable ?>.toObject());
                        break;
                    case 'xml':
                        res.xml({ root : { <?= modelVariable ?> : <?= modelVariable ?>.toObject() } });
                        break;
                    default:
                        res.render(ViewTemplatePath + '/show',{
                             <?= modelVariable ?>:<?= modelVariable ?>,
                             title : title
                        });
               }
            } else {
               req.flash('warning', '<?= modelVariable ?> Not Found.');
               res.redirect(pathTo.<?= nsPath ?><?= basePathPlural ?>());
            }
        });
    },

    /**
     * Edit action, returns a form via <?= addView ?>views/<?= basePathPlural ?>/edit.ejs view no JSON view.
     * Default mapping to GET '<?= namespace ?>/<?= basePath ?>/:id/edit'
     * View Helper method pathTo.edit_<?= nsPath ?><?= modelVariable ?>(instance)
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'edit': function(req, res, next) {
        var t = res.locals.t;
        var title = t('<?= basePathPlural ?>.title.show','Edit <?= modelName ?>');
        var format = req.params.format || '';
        <?= modelName ?>.findById(req.params.id, function(err, <?= modelVariable ?>) {
            if(err) {
                return next(err);
            }
            if(<?= modelVariable ?>) {
                if(req.query) {
                   for( var key in req.query) {
                      <?= modelVariable ?>[key] = req.query[key];
                   }
                }
                switch (format.toString()) {
                    case 'json':
                        res.json(<?= modelVariable ?>.toObject());
                        break;
                    case 'xml':
                        res.xml({ root : { <?= modelVariable ?> : <?= modelVariable ?>.toObject() } });
                        break;
                    default:
                        res.render(ViewTemplatePath + '/edit',{
                            <?= modelVariable ?> : <?= modelVariable ?>,
                            title : title
                        });
                }
            } else {
                    req.flash('warning','<?= modelVariable ?> Not Found.');
                    res.redirect(pathTo.<?= nsPath ?><?= basePathPlural ?>());
            }
        });
    },

    /**
     * Update action, updates a single item and redirects to Show or returns the object as json
     * Default mapping to PUT '<?= namespace ?>/<?= basePath ?>/:id', no GET mapping
     * View Helper method pathTo.update_<?= nsPath ?><?= modelVariable ?>(id)
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'update': function(req, res) {
        var format = req.params.format || '';
        var action = req.body._action || 'save';
        <?= modelName ?>.findById(req.params.id, function(err, <?= modelVariable ?>) {
            Tools.validateFields(<?= modelName ?>, req.body.<?= modelVariable ?>, {
                validate: true
            }, function(err, filtered) {
                if (err && err.length) {
                    req.flash('error','Could not update <?= modelVariable ?>: ' + err.join(', \n'));
                    res.redirect(pathTo.edit_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>, req.body.<?= modelVariable ?>));
                    return;
                }
                <?= modelVariable ?>.updateAttributes(filtered, function(err) {
                    if (err) {
                        console.log(err);
                        req.flash('error','Could not update <?= modelVariable ?>: ' + err);
                        res.redirect(pathTo.edit_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>));
                        return;
                    }
                    switch (format.toString()) {
                        case 'json':
                              res.json(<?= modelVariable ?>.toObject());
                           break;
                        case 'xml':
                              res.xml({ root : { <?= modelVariable ?> : <?= modelVariable ?>.toObject() } });
                           break;
                        default:
                           switch(action) {
                              case 'new':
                                    req.flash('info','<?= modelName ?> updated and new');
                                    res.redirect(pathTo.new_<?= nsPath ?><?= modelVariable ?>());
                                 break;
                              case 'copy':
                                    req.flash('info','<?= modelName ?> updated and copy');
                                    delete <?= modelVariable ?>.id;
                                    res.redirect(pathTo.new_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>.toObject()));
                                 break;
                              case 'apply':
                                    req.flash('success','<?= modelName ?> saved');
                                    res.redirect(pathTo.edit_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>.toObject()));
                                 break;
                              default:
                                    req.flash('success','<?= modelName ?> updated');
                                    res.redirect(pathTo.show_<?= nsPath ?><?= modelVariable ?>(<?= modelVariable ?>.toObject()));
                           }
                   }
               });
            });
        });
    },

    /**
     * Delete action, deletes a single item and redirects to index
     * Default mapping to DEL '<?= namespace ?>/<?= basePath ?>/:id', no GET mapping
     * View Helper method pathTo.destroy_<?= nsPath ?><?= modelVariable ?>(instance)
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'destroy': function(req, res){
         var returnTo = (req.session || {} ).returnTo || pathTo.<?= nsPath ?><?= basePathPlural ?>();
         <?= modelName ?>.findById(req.params.id, function(err, <?= modelVariable ?>) {
                if (!<?= modelVariable ?>) {
                    req.flash('error','Unable to locate the <?= modelVariable ?> to delete!');
                    res.send('false');
                    return false;
                }
                <?= modelVariable ?>.destroy(function(err) {
                   if(err) {
                       req.flash('error','There was an error deleting the <?= modelVariable ?>!');
                       res.send('"' + returnTo + '"');
                   } else {
                       req.flash('success','<?= modelName ?> deleted');
                       res.send('"' + returnTo + '"');
                   }
               });
        });
    },

    /**
     * Delete action, deletes a all items and redirects to index
     * Default mapping to DEL '<?= namespace ?>/<?= basePathPlural ?>', no GET mapping
     * View Helper method pathTo.destroy_<?= nsPath ?><?= basePathPlural ?>()
     * @param {Object} req
     * @param {Object} res
     * @param {Function} next
     **/
    'destroyall': function(req, res){
        var returnTo = (req.session || {} ).returnTo || pathTo.<?= nsPath ?><?= basePathPlural ?>();
        <?= modelName ?>.destroyAll(function(err) {
            if(err) {
                req.flash('error','There was an error deleting the <?= basePathPlural ?>!');
                res.send('"' + returnTo + '"');
            } else {
                req.flash('success','<?= controllerName ?> deleted');
                res.send('"' + returnTo + '"');
            }
        });
    }
};