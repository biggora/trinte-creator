/**
 *  <?= controllerName ?> Unit Test
 *  Created by create-test script @<?= new Date().toISOString() ?>
 **/
<?
var modelVariable = modelName.toLowerCase();
var basePath = modelName.toLowerCase();
var basePathPlural = controllerName.toLowerCase();
var nsPath = namespace && namespace !== "" ? "/" + namespace + "/" : "/";
?>
if (!process.env.NODE_ENV) {
	process.env.NODE_ENV = 'test';
}

var should = require('should');
var caminte = require('caminte');
var config = require('../../config/database');
var dbConf = config[process.env.NODE_ENV];
var <?= modelName ?>Model = require('../../app/models/<?= modelName ?>');
var Schema = caminte.Schema;
dbConf.host = process.env.DB_HOST || dbConf.host;
var schema = new Schema(dbConf.driver, dbConf);
var <?= modelName ?> = <?= modelName ?>Model(schema);

/**
 * Simple tests for the Banner model
 */
describe('Unit <?= modelName ?>:', function () {
	'use strict';
	var <?= basePath ?>, id;

	before(function (done) {
		schema.autoupdate(function () {
			'use strict';
			done();
		});
	});

	after(function (done) {
		done();
	});

	describe('create unit', function () {

		<?= basePath ?> = new <?= modelName ?>();
		it('<?= basePath ?> should be object', function () {
			<?= basePath ?>.should.be.type('object');
		});

		it('validate <?= basePath ?>', function (done) {
			<?= basePath ?>.isValid(function (valid) {
				valid.should.be.true;
				if (!valid) console.log(<?= basePath ?>.errors);
				done();
			});
		});

	});

	describe('#save()', function () {

		it('should be have #save', function () {
			<?= basePath ?>.should.be.have.property('save');
			<?= basePath ?>.save.should.be.type('function');
		});

		it('call save()', function (done) {
			<?= basePath ?>.save(function (err) {
				should.not.exist(err);
				<?= basePath ?>.should.be.have.property('id');
				<?= basePath ?>.id.should.not.eql(null);
				id = <?= basePath ?>.id;
				done();
			});
		});

	});

	describe('#destroy()', function () {

		it('should be have #destroy', function () {
			<?= basePath ?>.should.be.have.property('destroy');
			<?= basePath ?>.destroy.should.be.type('function');
		});

		it('call destroy()', function (done) {
			<?= basePath ?>.destroy(function (err) {
				should.not.exist(err);
				done();
			});
		});

	});

});